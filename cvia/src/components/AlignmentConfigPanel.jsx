import React, { useState, useEffect } from 'react';
import { createPortal } from 'react-dom';
import './AlignmentConfigPanel.css';

const ALIGNMENT_LEVELS = [
  { 
    value: 'conservative', 
    label: 'Conservateur', 
    description: 'Modifications minimales, pr√©serve l\'authenticit√©',
    icon: 'üõ°Ô∏è'
  },
  { 
    value: 'balanced', 
    label: '√âquilibr√©', 
    description: 'Optimise sans d√©naturer l\'exp√©rience',
    icon: '‚öñÔ∏è'
  },
  { 
    value: 'aggressive', 
    label: 'Agressif', 
    description: 'Maximise l\'ad√©quation avec le poste',
    icon: 'üéØ'
  },
  { 
    value: 'creative', 
    label: 'Cr√©atif', 
    description: 'Reformulation cr√©ative et impactante',
    icon: '‚ú®'
  }
];

const ALIGNMENT_FOCUS = [
  { value: 'keywords', label: 'Mots-cl√©s techniques', description: 'Optimise pour les ATS et mots-cl√©s' },
  { value: 'responsibilities', label: 'Responsabilit√©s', description: 'Met l\'accent sur les t√¢ches similaires' },
  { value: 'achievements', label: 'R√©alisations', description: 'Valorise les r√©sultats et impacts' },
  { value: 'skills', label: 'Comp√©tences', description: 'Aligne sur les comp√©tences requises' },
  { value: 'leadership', label: 'Leadership', description: 'Met en avant le management et l\'initiative' }
];

const WRITING_STYLES = [
  { value: 'professional', label: 'Professionnel', description: 'Ton formel et corporate' },
  { value: 'dynamic', label: 'Dynamique', description: 'Langage √©nergique et proactif' },
  { value: 'technical', label: 'Technique', description: 'Vocabulaire sp√©cialis√© et pr√©cis' },
  { value: 'results-oriented', label: 'Orient√© r√©sultats', description: 'Focus sur les m√©triques et KPIs' }
];

const CUSTOM_INSTRUCTIONS_EXAMPLES = [
  "Mettre l'accent sur les technologies mentionn√©es dans l'offre",
  "√âviter de mentionner les technologies obsol√®tes",
  "Utiliser le vocabulaire sp√©cifique au secteur",
  "Quantifier les r√©sultats avec des chiffres",
  "Souligner l'exp√©rience en √©quipe agile"
];

export default function AlignmentConfigPanel({ 
  isOpen, 
  onClose, 
  currentConfig, 
  onConfigChange,
  onApply,
  isApplying = false 
}) {
  const [config, setConfig] = useState({
    level: 'balanced',
    focus: ['keywords', 'responsibilities'],
    writingStyle: 'professional',
    customInstructions: '',
    preserveCompanyNames: true,
    preserveDates: true,
    enhanceAchievements: true,
    ...currentConfig
  });

  const [showPreview, setShowPreview] = useState(false);

  // Effet pour g√©rer l'ouverture/fermeture du modal
  useEffect(() => {
    if (isOpen) {
      // Emp√™cher le scroll de la page quand le modal est ouvert
      document.body.style.overflow = 'hidden';
      
      // G√©rer la fermeture avec la touche √âchap
      const handleEscape = (e) => {
        if (e.key === 'Escape') {
          onClose();
        }
      };
      
      document.addEventListener('keydown', handleEscape);
      
      return () => {
        document.body.style.overflow = 'unset';
        document.removeEventListener('keydown', handleEscape);
      };
    }
  }, [isOpen, onClose]);

  const handleConfigChange = (key, value) => {
    const newConfig = { ...config, [key]: value };
    setConfig(newConfig);
    onConfigChange?.(newConfig);
  };

  const handleFocusChange = (focusValue) => {
    const currentFocus = config.focus || [];
    const newFocus = currentFocus.includes(focusValue)
      ? currentFocus.filter(f => f !== focusValue)
      : [...currentFocus, focusValue];
    
    handleConfigChange('focus', newFocus);
  };

  const handleApply = () => {
    onApply?.(config);
  };

  if (!isOpen) return null;

  const modalContent = (
    <div 
      className="alignment-config-overlay"
      onClick={(e) => {
        // Fermer le modal si on clique sur l'overlay (pas sur le panel)
        if (e.target === e.currentTarget) {
          onClose();
        }
      }}
    >
      <div className="alignment-config-panel">
        {/* Header */}
        <div className="config-header">
          <h3>‚öôÔ∏è Configuration de l'alignement</h3>
          <button className="close-btn" onClick={onClose}>√ó</button>
        </div>

        <div className="config-content">
          {/* Niveau d'alignement */}
          <div className="config-section">
            <h4>üéöÔ∏è Niveau d'alignement</h4>
            <div className="alignment-levels">
              {ALIGNMENT_LEVELS.map(level => (
                <div 
                  key={level.value}
                  className={`level-option ${config.level === level.value ? 'selected' : ''}`}
                  onClick={() => handleConfigChange('level', level.value)}
                >
                  <div className="level-icon">{level.icon}</div>
                  <div className="level-info">
                    <div className="level-label">{level.label}</div>
                    <div className="level-description">{level.description}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Focus d'alignement */}
          <div className="config-section">
            <h4>üéØ Focus d'alignement (s√©lection multiple)</h4>
            <div className="focus-options">
              {ALIGNMENT_FOCUS.map(focus => (
                <div 
                  key={focus.value}
                  className={`focus-option ${config.focus?.includes(focus.value) ? 'selected' : ''}`}
                  onClick={() => handleFocusChange(focus.value)}
                >
                  <div className="focus-checkbox">
                    {config.focus?.includes(focus.value) ? '‚úì' : ''}
                  </div>
                  <div className="focus-info">
                    <div className="focus-label">{focus.label}</div>
                    <div className="focus-description">{focus.description}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Style de r√©daction */}
          <div className="config-section">
            <h4>‚úçÔ∏è Style de r√©daction</h4>
            <div className="writing-styles">
              {WRITING_STYLES.map(style => (
                <div 
                  key={style.value}
                  className={`style-option ${config.writingStyle === style.value ? 'selected' : ''}`}
                  onClick={() => handleConfigChange('writingStyle', style.value)}
                >
                  <div className="style-info">
                    <div className="style-label">{style.label}</div>
                    <div className="style-description">{style.description}</div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Options avanc√©es */}
          <div className="config-section">
            <h4>üîß Options avanc√©es</h4>
            <div className="advanced-options">
              <label className="option-checkbox">
                <input 
                  type="checkbox" 
                  checked={config.preserveCompanyNames}
                  onChange={(e) => handleConfigChange('preserveCompanyNames', e.target.checked)}
                />
                <span>Pr√©server les noms d'entreprises</span>
              </label>
              
              <label className="option-checkbox">
                <input 
                  type="checkbox" 
                  checked={config.preserveDates}
                  onChange={(e) => handleConfigChange('preserveDates', e.target.checked)}
                />
                <span>Pr√©server les dates exactes</span>
              </label>
              
              <label className="option-checkbox">
                <input 
                  type="checkbox" 
                  checked={config.enhanceAchievements}
                  onChange={(e) => handleConfigChange('enhanceAchievements', e.target.checked)}
                />
                <span>Valoriser les r√©alisations</span>
              </label>
            </div>
          </div>

          {/* Instructions personnalis√©es */}
          <div className="config-section">
            <h4>üìù Instructions personnalis√©es</h4>
            <textarea
              className="custom-instructions"
              placeholder="Ajoutez des instructions sp√©cifiques pour l'IA..."
              value={config.customInstructions}
              onChange={(e) => handleConfigChange('customInstructions', e.target.value)}
              rows={3}
            />
            
            <div className="instruction-examples">
              <div className="examples-label">üí° Exemples d'instructions :</div>
              {CUSTOM_INSTRUCTIONS_EXAMPLES.map((example, index) => (
                <div 
                  key={index}
                  className="example-instruction"
                  onClick={() => handleConfigChange('customInstructions', example)}
                >
                  "{example}"
                </div>
              ))}
            </div>
          </div>

          {/* Aper√ßu */}
          <div className="config-section">
            <button 
              className="preview-btn"
              onClick={() => setShowPreview(!showPreview)}
            >
              {showPreview ? 'üôà Masquer l\'aper√ßu' : 'üëÅÔ∏è Aper√ßu de l\'alignement'}
            </button>
            
            {showPreview && (
              <div className="alignment-preview">
                <div className="preview-note">
                  üí° Aper√ßu bas√© sur votre premi√®re exp√©rience avec les param√®tres actuels
                </div>
                {/* Ici on pourrait ajouter un vrai aper√ßu */}
              </div>
            )}
          </div>
        </div>

        {/* Footer */}
        <div className="config-footer">
          <button className="cancel-btn" onClick={onClose}>
            Annuler
          </button>
          <button 
            className="apply-btn" 
            onClick={handleApply}
            disabled={isApplying}
          >
            {isApplying ? '‚è≥ Application...' : '‚ú® Appliquer l\'alignement'}
          </button>
        </div>
      </div>
    </div>
  );

  // Utiliser createPortal pour rendre le modal directement dans le body
  return createPortal(modalContent, document.body);
}